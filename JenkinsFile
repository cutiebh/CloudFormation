pipeline {
  agent any

  parameters {
    string(name: 'STUDENT_ID',  defaultValue: 'STU123456', description: 'Student ID')
    choice(name: 'STAGENAME',  choices: ['dev'], description: 'Environment')
    string(name: 'GIT_REPO',    defaultValue: 'https://github.com/cutiebh/CloudFormation.git', description: 'Repo URL')
    string(name: 'GIT_BRANCH',  defaultValue: 'main', description: 'Branch')
    string(name: 'AWS_REGION',  defaultValue: 'us-east-1', description: 'AWS region')
    string(name: 'CFN_TEMPLATE', defaultValue: 'booklist-lambda-restapi.yaml', description: 'CFN template path')
    booleanParam(name: 'SKIP_DEPLOY',  defaultValue: false)
    booleanParam(name: 'SKIP_API',     defaultValue: false)
    booleanParam(name: 'SKIP_DESTROY', defaultValue: true)
 
  }

  environment {
    APP_NAME           = 'jenkins-windows-cfn-demo'
    CFN_STACK_NAME     = "BookListStack"
    AWS_DEFAULT_REGION = "${params.AWS_REGION}"
  }

  stages {
      
      stage('Checkout Repository') {
      steps {
        echo "Checking out %GIT_REPO% @ %GIT_BRANCH% ..."
        // Simple built-in git step
        git branch: "${params.GIT_BRANCH}", url: "${params.GIT_REPO}"
      }
    }

    stage('Deploy CloudFormation') {
      steps {
          
           script {
                    if (params.SKIP_DEPLOY) return
                }
           withCredentials([[$class: 'AmazonWebServicesCredentialsBinding',
      credentialsId: 'aws_default',
      accessKeyVariable: 'AWS_ACCESS_KEY_ID',
      secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
        bat """
        echo Workspace: %WORKSPACE%
          aws cloudformation deploy ^
            --template-file "%WORKSPACE%\\booklist-lambda-restapi.yaml" ^
            --stack-name "%CFN_STACK_NAME%" ^
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM ^
            --parameter-overrides StudentId=%STUDENT_ID% StageName=%STAGENAME% ^
            --no-fail-on-empty-changeset
        """
      }
      }
    }

    
    stage('Call API') {
  steps {
      withCredentials([[$class: 'AmazonWebServicesCredentialsBinding',
      credentialsId: 'aws_default',
      accessKeyVariable: 'AWS_ACCESS_KEY_ID',
      secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
    bat '''
      for /f "usebackq delims=" %%A in (`
        aws cloudformation describe-stacks --stack-name "%CFN_STACK_NAME%" --region "%AWS_DEFAULT_REGION%" ^
          --query "Stacks[0].Outputs[?OutputKey=='ApiUrl'].OutputValue | [0]" --output text
      `) do set API_URL=%%A

      if /I "%API_URL%"=="None" set API_URL=

      rem If no URL, skip without error
      if "%API_URL%"=="" goto :eof
      echo API url : %API_URL%
      curl "%API_URL%/ping"
    '''
      }
  }
}



    stage('Destroy CloudFormation') {
      steps {
           script {
                    if (params.SKIP_DESTROY) return
                }
          
            withCredentials([[$class: 'AmazonWebServicesCredentialsBinding',
      credentialsId: 'aws_default',
      accessKeyVariable: 'AWS_ACCESS_KEY_ID',
      secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
        bat """
         rem aws cloudformation delete-stack --stack-name "%CFN_STACK_NAME%"
        """
      }
      }
    }
  }
}

